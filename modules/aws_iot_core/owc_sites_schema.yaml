---
swagger: "2.0"
info:
  version: "1.0.0"
  title: "Only Wild Camping - Sites"
host: "api.onlywildcamping.com"
basePath: "/sites"
schemes:
- "https"
paths:
  /:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "north_east_longitude"
        in: "query"
        required: false
        type: "string"
      - name: "south_west_latitude"
        in: "query"
        required: false
        type: "string"
      - name: "north_east_latitude"
        in: "query"
        required: false
        type: "string"
      - name: "required_attributes"
        in: "query"
        required: false
        type: "string"
      - name: "south_west_longitude"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/LocationsResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-request-validator: "params-only"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::971719831950:role/APIGatewayScanLocations"
        uri: "arn:aws:apigateway:eu-west-1:dynamodb:action/Scan"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$')){\"type\": \"\
                FeatureCollection\", \"features\": [#set($items = $inputRoot.Items)#foreach($item\
                \ in $items){\"type\": \"Feature\", \"properties\": {\"urn\": \"$item.urn.S\"\
                , \"name\": \"$item.name.S\", \"description\": \"$item.description.S\"\
                , \"type\": \"$item.type.S\", \"capacity\": \"$item.capacity.N\",\
                \ \"image\": \"$item.image.S\", \"attributes\": []}, \"geometry\"\
                : {\"type\": \"Point\", \"coordinates\": [$item.longitude.N, $item.latitude.N]}}#if($foreach.hasNext),\
                \ #end#end], #if($inputRoot.LastEvaluatedKey != \"\")\"last_urn\"\
                : \"$inputRoot.LastEvaluatedKey.urn.S\",#end\"count\": $inputRoot.Count,\
                \ \"scanned\": $inputRoot.ScannedCount}\n\n\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        requestTemplates:
          application/json: "#set($query = $input.params().querystring)\n{\n   \"\
            ConsistentRead\": true,\n   #if ($query.north_east_latitude != \"\" &&\
            \ $query.north_east_longitude != \"\" && $query.south_west_latitude !=\
            \ \"\" && $query.south_west_longitude != \"\")\n   \"FilterExpression\"\
            : \"#lat < :ne_lat and #lat > :sw_lat and #lon < :ne_lon and #lon > :sw_lon\"\
            ,\n   \"ExpressionAttributeNames\": { \n      \"#lat\": \"latitude\",\n\
            \      \"#lon\":\"longitude\"\n   },\n   \"ExpressionAttributeValues\"\
            : {\n     \":ne_lat\": {\n       \"N\": \"$query.north_east_latitude\"\
            \n     },\n     \":ne_lon\": {\n       \"N\": \"$query.north_east_longitude\"\
            \n     },\n     \":sw_lat\": {\n       \"N\": \"$query.south_west_latitude\"\
            \n     },\n     \":sw_lon\": {\n       \"N\": \"$query.south_west_longitude\"\
            \n     }\n   },\n   #end\n   \"ReturnConsumedCapacity\": \"NONE\",\n \
            \  \"Select\": \"ALL_ATTRIBUTES\",\n   #if ($query.last_urn!= \"\")\"\
            ExclusiveStartKey\": {\n        \"urn\": {\n            \"S\": \"$query.last_urn\"\
            \n        }\n    },#end\n   \"Limit\": 1000,\n   \"TableName\": \"Locations\"\
            \n}"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Location"
        required: true
        schema:
          $ref: "#/definitions/Location"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/LocationResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        500:
          description: "500 response"
      security:
      - Cognito: []
      x-amazon-apigateway-request-validator: "body-only"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:971719831950:function:create-or-update-site/invocations"
        responses:
          '\{\"status\": 400.*':
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($em = $util.parseJson($input.path('$.errorMessage')))\n\
                {\"message\": \"$em.message\", \"error\": \"$em.error\"}"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($lambda_response = $input.path('$'))\n{\n  \
                \  \"statusCode\": $lambda_response.statusCode,\n    \"body\" : {\n\
                \        \"$lambda_response.body.URN\": {\n            \"name\": \"\
                $lambda_response.body.name\",\n            \"description\": \"$lambda_response.body.description\"\
                ,\n            \"capacity\": $lambda_response.body.capacity,\n   \
                \         \"image\": \"$lambda_response.body.image\",\n          \
                \  \"latitude\": $lambda_response.body.latitude,\n            \"longitude\"\
                : $lambda_response.body.longitude,\n            \"type\": \"$lambda_response.body.type\"\
                \n        }\n    }\n}\n"
          '\{\"status\": 500.*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set ($em = $util.parseJson($input.path('$.errorMessage')))\n\
                {\"message\": \"$em.message\", \"error\": \"$em.error\"}"
        requestParameters:
          integration.request.header.request_type: "'GET'"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        requestTemplates:
          application/json: "{\"method\": \"$context.httpMethod\", \"action\": \"\
            create\", \"body\": $input.json('$')}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /{urn}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "urn"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/LocationResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-request-validator: "params-only"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::971719831950:role/APIGatewayGetItemLocations"
        uri: "arn:aws:apigateway:eu-west-1:dynamodb:action/GetItem"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($item = $input.path('$').Item){\"type\": \"\
                Feature\", \"properties\": {#foreach($top_key in $item.keySet())#if($top_key\
                \ != 'latitude' && $top_key != 'longitude')#foreach($mid_key in $item.get($top_key).keySet())#if($mid_key\
                \ == 'S')\"$top_key\": \"$item.get($top_key).S\"#elseif($mid_key ==\
                \ 'N')\"$top_key\": $item.get($top_key).N#elseif($mid_key == 'BOOL')\"\
                $top_key\": $item.get($top_key).BOOL#elseif($mid_key == 'SS')\"$top_key\"\
                : [#foreach($element in $item.get($top_key).SS)\"$element\"#if($foreach.hasNext),\
                \ #end#end]#end#end#if($foreach.hasNext), #end#end#end}, \"geometry\"\
                : {\"type\": \"Point\", \"coordinates\": [$item.longitude.N, $item.latitude.N]}}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        requestTemplates:
          application/json: "{\n\t\"ConsistentRead\": true,\n\t\"Key\": {\n\t\t\"\
            urn\": {\n\t\t\t\"S\": \"$input.params().path.get('urn')\"\n\t\t}\n\t\
            },\n\t\"ReturnConsumedCapacity\": \"NONE\",\n\t\"TableName\": \"Locations\"\
            \n}"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      parameters:
      - name: "urn"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "204 response"
      security:
      - Cognito:
        - "delete_site"
      x-amazon-apigateway-request-validator: "params-only"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::971719831950:role/APIGatewayDeleteItemLocations"
        uri: "arn:aws:apigateway:eu-west-1:dynamodb:action/DeleteItem"
        responses:
          200:
            statusCode: "204"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        requestTemplates:
          application/json: "{\n    \"TableName\": \"Locations\",\n    \"Key\": {\n\
            \t\t\"urn\": {\n\t\t\t\"S\": \"$input.params().path.get('urn')\"\n\t\t\
            }\n\t},\n    \"ReturnValues\": \"NONE\"\n}"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PATCH'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
    patch:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "urn"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "Location"
        required: true
        schema:
          $ref: "#/definitions/Location"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/LocationResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
        400:
          description: "400 response"
        500:
          description: "500 response"
      security:
      - Cognito:
        - "update_site"
      x-amazon-apigateway-request-validator: "params-and-body"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:971719831950:function:create-or-update-site/invocations"
        responses:
          '\{\"status\": 400.*':
            statusCode: "400"
            responseTemplates:
              application/json: "#set ($em = $util.parseJson($input.path('$.errorMessage')))\n\
                {\"message\": \"$em.message\", \"error\": \"$em.error\"}"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          '\{\"status\": 500.*':
            statusCode: "500"
            responseTemplates:
              application/json: "#set ($em = $util.parseJson($input.path('$.errorMessage')))\n\
                {\"message\": \"$em.message\", \"error\": \"$em.error\"}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        requestTemplates:
          application/json: "{\"method\": \"$context.httpMethod\", \"action\": \"\
            update\", \"urn\": \"$input.params().path.get('urn')\", \"body\": $input.json('$')}"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /{urn}/attributes:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "urn"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-request-validator: "params-only"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::971719831950:role/APIGatewayGetItemLocations"
        uri: "arn:aws:apigateway:eu-west-1:dynamodb:action/GetItem"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($item = $input.path('$').Item){#foreach($top_key\
                \ in $item.keySet())#foreach($mid_key in $item.get($top_key).keySet())#if($mid_key\
                \ == 'S')\"$top_key\": \"$item.get($top_key).S\"#elseif($mid_key ==\
                \ 'N')\"$top_key\": $item.get($top_key).N#elseif($mid_key == 'BOOL')\"\
                $top_key\": $item.get($top_key).BOOL#elseif($mid_key == 'SS')\"$top_key\"\
                : [#foreach($element in $item.get($top_key).SS)\"$element\"#if($foreach.hasNext),\
                \ #end#end]#end#end#if($foreach.hasNext), #end#end}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        requestTemplates:
          application/json: "{\n\t\"ConsistentRead\": true,\n\t\"Key\": { \n\t\t\"\
            urn\" : { \n\t\t\t\"S\": \"$input.params().path.get('urn')\"\n\t\t}\n\t\
            },\n\t\"ExpressionAttributeNames\": { \n      \"#property\" : \"attributes\"\
            \ \n    },\n\t\"ProjectionExpression\": \"#property\",\n    \"ReturnConsumedCapacity\"\
            : \"NONE\",\n    \"TableName\": \"Locations\"\n}"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /{urn}/attributes/{attribute}:
    delete:
      consumes:
      - "application/json"
      parameters:
      - name: "attribute"
        in: "path"
        required: true
        type: "string"
      - name: "urn"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "204 response"
      security:
      - Cognito:
        - "delete_attribute"
      x-amazon-apigateway-request-validator: "params-only"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::971719831950:role/APIGatewayUpdateItemLocations"
        uri: "arn:aws:apigateway:eu-west-1:dynamodb:action/UpdateItem"
        responses:
          200:
            statusCode: "204"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        requestTemplates:
          application/json: "{\n    \"TableName\": \"Locations\",\n    \"Key\": {\n\
            \t\t\"urn\": {\n\t\t\t\"S\": \"$input.params().path.get('urn')\"\n\t\t\
            }\n\t},\n    \"UpdateExpression\": \"DELETE attributes :attrs\",\n   \
            \ \"ExpressionAttributeValues\": {\n        \":attrs\": {\n          \
            \  \"SS\": [\n                \"$input.params().path.get('attribute')\"\
            \n            ]\n        }\n    },\n    \"ReturnValues\": \"NONE\"\n}"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /{urn}/{property}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "urn"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PropertyResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-request-validator: "params-only"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::971719831950:role/APIGatewayGetItemLocations"
        uri: "arn:aws:apigateway:eu-west-1:dynamodb:action/GetItem"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($item = $input.path('$').Item)\n{#foreach($top_key\
                \ in $item.keySet())#foreach($mid_key in $item.get($top_key).keySet())#if($mid_key\
                \ == 'S')\"$top_key\": \"$item.get($top_key).S\"#elseif($mid_key ==\
                \ 'N')\"$top_key\": $item.get($top_key).N#elseif($mid_key == 'BOOL')\"\
                $top_key\": $item.get($top_key).BOOL#end#end#if($foreach.hasNext),\
                \ #end#end}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        requestTemplates:
          application/json: "{\n\t\"ConsistentRead\": true,\n\t\"Key\": { \n\t\t\"\
            urn\" : { \n\t\t\t\"S\": \"$input.params().path.get('urn')\"\n\t\t}\n\t\
            },\n\t\"ExpressionAttributeNames\": { \n      \"#property\" : \"$input.params().path.get('property')\"\
            \ \n    },\n\t\"ProjectionExpression\": \"#property\",\n    \"ReturnConsumedCapacity\"\
            : \"NONE\",\n    \"TableName\": \"Locations\"\n}"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      parameters:
      - name: "property"
        in: "path"
        required: true
        type: "string"
      - name: "urn"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "204 response"
      security:
      - Cognito:
        - "delete_property"
      x-amazon-apigateway-request-validator: "params-only"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::971719831950:role/APIGatewayUpdateItemLocations"
        uri: "arn:aws:apigateway:eu-west-1:dynamodb:action/UpdateItem"
        responses:
          200:
            statusCode: "204"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        requestTemplates:
          application/json: "{\n    \"TableName\": \"Locations\",\n    \"Key\": {\n\
            \t\t\"urn\": {\n\t\t\t\"S\": \"$input.params().path.get('urn')\"\n\t\t\
            }\n\t},\n    \"UpdateExpression\": \"REMOVE #property\",\n    \"ExpressionAttributeNames\"\
            : {\n        \"#property\": \"$input.params().path.get('property')\"\n\
            \    },\n    \"ReturnValues\": \"NONE\"\n}"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
securityDefinitions:
  Cognito:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "cognito_user_pools"
    x-amazon-apigateway-authorizer:
      providerARNs:
      - "arn:aws:cognito-idp:eu-west-1:971719831950:userpool/eu-west-1_qDrDmtEF1"
      type: "cognito_user_pools"
definitions:
  PropertyResponse:
    type: "object"
    properties:
      property:
        $ref: "#/definitions/Property"
  Empty: {}
  LocationsResponse:
    type: "object"
    properties:
      count:
        type: "number"
        format: "int"
        description: "The number of the returned locations."
      scanned:
        type: "number"
        format: "int"
        description: "The number of the scanned locations."
      locations:
        type: "array"
        description: "An array of Location objects that match the query."
        items:
          $ref: "#/definitions/Location"
  Property:
    type: "object"
    properties:
      property:
        type: "string"
  LocationResponse:
    $ref: "#/definitions/Location"
  Location:
    type: "object"
    required:
    - "capacity"
    - "latitude"
    - "longitude"
    - "name"
    - "type"
    properties:
      urn:
        type: "string"
        description: "URN of location."
      name:
        type: "string"
        description: "Display name of location."
      description:
        type: "string"
        description: "Description of location."
      type:
        type: "string"
        description: "A URN representing the type."
      latitude:
        type: "number"
        format: "double"
        description: "The latitude of the location."
      longitude:
        type: "number"
        format: "double"
        description: "The longitude of the location."
      capacity:
        type: "number"
        format: "int"
        description: "Capacity of location. For example, 4 people."
      image:
        type: "string"
        description: "A URL representing the primary image of the location."
      attributes:
        type: "array"
        description: "A list of the URNs of the attributes associated with this location."
        items:
          type: "string"
x-amazon-apigateway-gateway-responses:
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
x-amazon-apigateway-request-validators:
  params-only:
    validateRequestParameters: true
    validateRequestBody: false
  body-only:
    validateRequestParameters: false
    validateRequestBody: true
  params-and-body:
    validateRequestParameters: true
    validateRequestBody: true
